# !/usr/bin/python3
# encoding=utf8
# -*- coding: utf-8 -*-
"""
@author: Noname400
"""
version = '0.7 29.12.22'

from libraries.secp256k1_lib import  Load_data_to_memory, check_collision, scalar_multiplication, point_negation, point_negation, point_loop_addition, pub2upub, point_subtraction
import time
from datetime import datetime
from sys import argv
from requests import get
from os import system, path, name, mkdir
import secrets

def send_telegram(text: str, telegram_channel_id, telegram_token):
    try:
        get('https://api.telegram.org/bot{}/sendMessage'.format(telegram_token), params=dict(
        chat_id=telegram_channel_id,
        text=text))
    except:
        print(f'[E] Error send telegram. Reconnect.')
        return False
    else: 
        return True

def save(token, text):
    if path.exists('log'):
        file = 'log/res-'+str(token)+'.txt'
        f = open(file,'a')
        f.write(f'[*] {text} \n')
        f.close()
    else:
        mkdir('log')
        file = 'log/res-'+str(token)+'.txt'
        f = open(file,'a')
        f.write(f'[*] {text} \n')
        f.close()

def cls():
    system('cls' if name=='nt' else 'clear')

def convert_int(num:int):
    dict_suffix = {0:'Key', 1:'KKey', 2:'MKey', 3:'GKey', 4:'TKey', 5:'PKey', 6:'EKeys'}
    num *= 1.0
    idx = 0
    for _ in range(len(dict_suffix)-1):
        if int(num/1000) > 0:
            idx += 1
            num /= 1000
    return ('%.4f'%num), dict_suffix[idx]

def date_str():
    now = datetime.now()
    return now.strftime("%m/%d/%Y, %H:%M:%S")

def scan():
    pass

if __name__ == "__main__":
    cls()
    file_out_bloom = argv[1]
    file_pub = argv[2]

    print('-'*70,end='\n')
    print(f'[I] Version: {version}')
    print(f'[I] File pub : {file_pub}')
    print(f'[I] File bloom : {file_out_bloom}')
    print(f'[I] START: {date_str()}')
    print('-'*70,end='\n')

    Load_data_to_memory(file_out_bloom, True)
    print('-'*70,end='\n')
    t1 = 0x3FFFFF
    t2 = 0x3FFFFF
    seeds_ = 0
    co = 0
    total = 0
    mp2 = scalar_multiplication(0x1) # 0x1
    mp2_neg = point_negation(mp2)
    mp3 = scalar_multiplication(0x1000000000000000000000000000000000000000000000000) # 0x1000000000000000000000000000000000000000000000000
    mp3_neg = point_negation(mp3)

    with open(file_pub, 'r') as file:
        for line in file:
            line = line.strip().lower()
            if len(line) == 66:
                line = pub2upub(line)
            elif len(line) == 130:
                pass
            else:
                print(f'error public {line}')
                exit(1)
            line = line if isinstance(line, bytes) else bytes.fromhex(line)
    
            ser_ = line # 03EDD607617F68DD3D70813D62B33F19889960330CF7BBCFA5810F4E6462F2CB1D #scalar_multiplication(0x7b765267335ddc9be46e5b8455a6263efbb8cdb3ea2d45c71c27498bf4e13cf0) # 0x7b765267335ddc9be46e5b8455a6263efbb8cdb3ea2d45c71c27498bf4e13cf0
            print(f'curent public key {ser_.hex()}')
            st = time.time()
            #pub_dec1 = point_loop_addition(t1, ser_, mp3_neg)
            pub1 = ser_
            for dec1 in range(t1):
                pub1 = point_subtraction(pub1, mp3)
                #pub1 = pub_dec1[dec1*65:dec1*65+65]
                pub_dec2 = point_loop_addition(t2, pub1, mp2_neg)
                for dec2 in range(t2):
                    pub2 = pub_dec2[dec2*65:dec2*65+65]
                    if check_collision(pub2[1:21]):
                        print(f'\n COLISION {date_str()} YES {pub2.hex()}\n')
                        save('FOUND',f'COLISION {date_str()} YES {pub2.hex()} source:{ser_.hex()}')
                seeds_ += 1
                total += t2
                co += t2
                #if co%10 == 0:
                speed = int(((co)/(time.time()-st)))
                speed_float, speed_hash = convert_int(speed)
                num = time.time()-st
                print(f'Total {"%.6f"%((seeds_/2**22*100))}% {speed_float, speed_hash}', end='\r')
                co = 0
                st = time.time()
            
    print(f'[I] FINISH: {date_str()}')